package dev.tenacity.module.impl.exploit

import dev.tenacity.Tenacity
import dev.tenacity.event.impl.game.WorldEvent
import dev.tenacity.event.impl.network.PacketReceiveEvent
import dev.tenacity.event.impl.network.PacketSendEvent
import dev.tenacity.event.impl.player.JumpEvent
import dev.tenacity.event.impl.player.MotionEvent
import dev.tenacity.module.Category
import dev.tenacity.module.Module
import dev.tenacity.module.impl.movement.Speed
import dev.tenacity.module.settings.impl.BooleanSetting
import dev.tenacity.module.settings.impl.MultipleBoolSetting
import dev.tenacity.module.settings.impl.NumberSetting
import dev.tenacity.utils.misc.MathUtils.getRandomInRange
import dev.tenacity.utils.server.PacketUtils
import dev.tenacity.utils.server.ServerUtils
import dev.tenacity.utils.time.TimerUtil
import net.minecraft.client.entity.EntityPlayerSP
import net.minecraft.network.Packet
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.potion.Potion
import net.minecraft.util.BlockPos
import net.minecraft.util.EnumFacing
import java.util.concurrent.CopyOnWriteArrayList
import java.util.function.Consumer
import java.util.stream.Collectors

class Disabler : Module("Disabler", Category.EXPLOIT, "Disables some anticheats") {
    private val disablers = MultipleBoolSetting(
        "Disablers",
        BooleanSetting("WatchDog",false),
        BooleanSetting("Watchdog Strafe", false),
        BooleanSetting("Watchdog Timer", false),
        BooleanSetting("MMC", false),
        BooleanSetting("C06->C04", false),
        BooleanSetting("C04->C06", false),
        BooleanSetting("Hover", false),
        BooleanSetting("Spoof Ground", false),
        BooleanSetting("C0B Cancel", false),
        BooleanSetting("C0C Spam", false),
        BooleanSetting("Verus", false),
        BooleanSetting("Omni Sprint", false),
        BooleanSetting("Void TP", false),
        BooleanSetting("Silent S08", false)
    )

    private val hoverHeight = NumberSetting("Hover Height", 0.1, 5.0, 0.01, 0.01)

    private val onGround = BooleanSetting("On Ground", true)

    private val TPDelay = NumberSetting("TP Delay", 20.0, 100.0, 5.0, 1.0)

    private val timer = TimerUtil()
    private val joinTimer = TimerUtil()

    private val synced = false

    private val watchdogPlayerPackets = CopyOnWriteArrayList<Packet<*>>()
    private val watchdogC0FC00Packets = CopyOnWriteArrayList<Packet<*>>()
    private val watchdogInvPackets = CopyOnWriteArrayList<Packet<*>>()

    private val packets = CopyOnWriteArrayList<Packet<*>>()

    private val s08Y = 0.0

    private val airTicks = 0

    private var curOnGroundTicks = 0
    private var lastOnGroundTicks = 0

    init {
        TPDelay.addParent(disablers) { voidTPDisabler: MultipleBoolSetting -> voidTPDisabler.getSetting("Void TP").isEnabled }
        hoverHeight.addParent(disablers) { hoverDisabler: MultipleBoolSetting -> hoverDisabler.getSetting("Hover").isEnabled }
        onGround.addParent(disablers) { spoofGroundDisabler: MultipleBoolSetting -> spoofGroundDisabler.getSetting("Spoof Ground").isEnabled }
        this.addSettings(disablers, TPDelay, onGround, hoverHeight)
    }

    override fun onMotionEvent(event: MotionEvent) {
        val enabledBooleanSettings =
            disablers.boolSettings.stream().filter { obj: BooleanSetting -> obj.isEnabled }.collect(Collectors.toList())


        if (enabledBooleanSettings.size == 1) {
            this.suffix = enabledBooleanSettings[0].name
        } else if (enabledBooleanSettings.size > 1) {
            this.suffix = enabledBooleanSettings.size.toString() + " Enabled"
        } else {
            this.suffix = "None"
        }

        for (booleanSetting in disablers.boolSettings) {
            if (booleanSetting.isEnabled) {
                when (booleanSetting.name) {
                    "WatchDog" -> {
                        if (event.isPre) {
                            mc.thePlayer.isSprinting = false
                            if (mc.thePlayer.onGround){
                                curOnGroundTicks++
                            }
                        }
                    }
                    "MMC" -> if (timer.hasTimeElapsed(getRandomInRange(1000, 1500).toLong(), true)) {
                        packets.forEach(Consumer { packet: Packet<*>? -> PacketUtils.sendPacketNoEvent(packet) })
                        packets.clear()
                    }

                    "Watchdog Timer" -> if (spikeTimer.hasTimeElapsed(700, true)) {
                        timer.reset()
                    }

                    "C0C Spam" -> PacketUtils.sendPacketNoEvent(C0CPacketInput())
                }
            }
        }
    }

    override fun onPacketSendEvent(event: PacketSendEvent) {
        if (mc.thePlayer == null) return
        for (booleanSetting in disablers.boolSettings) {
            if (booleanSetting.isEnabled) {
                when (booleanSetting.name) {
                    "WatchDog" -> {
                        if (event.packet is C0BPacketEntityAction && (event.packet as C0BPacketEntityAction).action == C0BPacketEntityAction.Action.OPEN_INVENTORY) {
                            print("NoOpen")
                            event.cancel()
                        }
                    }
                    "Watchdog Strafe" -> if (ServerUtils.isOnHypixel()) {
                        if (event.packet is C03PacketPlayer && !mc.thePlayer.isPotionActive(Potion.jump)) {
                            val c03 = event.packet as C03PacketPlayer
                            if (Tenacity.INSTANCE.moduleCollection
                                    .getModule(Speed::class.java).isEnabled && mc.thePlayer.fallDistance < 1
                            ) c03.isOnGround = true

                            if (Tenacity.INSTANCE.moduleCollection
                                    .getModule(Speed::class.java).isEnabled && mc.thePlayer.ticksExisted % 4 != 0 && mc.thePlayer.fallDistance < 1
                            ) {
                                event.cancel()
                                watchdogPlayerPackets.add(event.packet)
                            } else if (!watchdogPlayerPackets.isEmpty()) {
                                watchdogPlayerPackets.forEach(Consumer { packet: Packet<*>? ->
                                    PacketUtils.sendPacketNoEvent(
                                        packet
                                    )
                                })
                                watchdogPlayerPackets.clear()
                            }
                        }
                    }

                    "Watchdog Timer" -> if (ServerUtils.isOnHypixel()) {
                        if (event.packet is C03PacketPlayer) {
                            val c03 = event.packet as C03PacketPlayer
                            if (!c03.isMoving && !c03.getRotating()) {
                                event.cancel()
                                break
                            }
                        }
                        if (!timer.hasTimeElapsed(350)) {
                            if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) {
                                event.cancel()
                                watchdogC0FC00Packets.add(event.packet)
                            }
                        } else if (!watchdogC0FC00Packets.isEmpty()) {
                            watchdogC0FC00Packets.forEach(Consumer { packet: Packet<*>? ->
                                PacketUtils.sendPacketNoEvent(
                                    packet
                                )
                            })
                            watchdogC0FC00Packets.clear()
                        }
                    }

                    "Void TP" -> if (event.packet is C03PacketPlayer) {
                        val c03 = event.packet as C03PacketPlayer
                        if (mc.thePlayer.ticksExisted % TPDelay.value == 0.0) {
                            c03.setY(c03.positionY - 1000)
                        }
                    }

                    "MMC" -> {
                        if (event.packet is C0BPacketEntityAction) {
                            val c0b = event.packet as C0BPacketEntityAction
                            if (c0b.action == C0BPacketEntityAction.Action.START_SPRINTING) {
                                if (EntityPlayerSP.serverSprintState) {
                                    PacketUtils.sendPacketNoEvent(
                                        C0BPacketEntityAction(
                                            mc.thePlayer,
                                            C0BPacketEntityAction.Action.STOP_SPRINTING
                                        )
                                    )
                                    EntityPlayerSP.serverSprintState = false
                                }
                            }
                            event.cancel()
                        }

                        if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) {
                            event.cancel()
                            packets.add(event.packet)
                        }
                    }

                    "C06->C04" -> if (event.packet is C06PacketPlayerPosLook) {
                        val c06 = event.packet as C06PacketPlayerPosLook
                        event.packet =
                            C04PacketPlayerPosition(c06.positionX, c06.positionY, c06.positionZ, c06.isOnGround)
                    }

                    "C04->C06" -> if (event.packet is C04PacketPlayerPosition) {
                        val c04 = event.packet as C04PacketPlayerPosition
                        event.packet = C06PacketPlayerPosLook(
                            c04.positionX,
                            c04.positionY,
                            c04.positionZ,
                            mc.thePlayer.rotationYaw,
                            mc.thePlayer.rotationPitch,
                            c04.isOnGround
                        )
                    }

                    "Hover" -> if (event.packet is C03PacketPlayer) {
                        val c03 = event.packet as C03PacketPlayer
                        c03.setY(mc.thePlayer.posY + hoverHeight.value)
                    }

                    "Spoof Ground" -> if (event.packet is C03PacketPlayer) {
                        val c03 = event.packet as C03PacketPlayer
                        c03.isOnGround = onGround.isEnabled
                    }

                    "C0B Cancel" -> if (event.packet is C0BPacketEntityAction) event.cancel()
                    "Verus" -> if (event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive) event.cancel()
                    "Omni Sprint" -> if (event.packet is C0BPacketEntityAction) {
                        val c0b = event.packet as C0BPacketEntityAction
                        if (c0b.action == C0BPacketEntityAction.Action.START_SPRINTING) {
                            if (EntityPlayerSP.serverSprintState) {
                                PacketUtils.sendPacketNoEvent(
                                    C0BPacketEntityAction(
                                        mc.thePlayer,
                                        C0BPacketEntityAction.Action.STOP_SPRINTING
                                    )
                                )
                                EntityPlayerSP.serverSprintState = false
                            }
                        }
                        event.cancel()
                    }
                }
            }
        }
    }

    override fun onPacketReceiveEvent(event: PacketReceiveEvent) {
        for (booleanSetting in disablers.boolSettings) {
            if (booleanSetting.isEnabled) {
                when (booleanSetting.name) {
                    "WatchDog" -> {
                        if (event.packet is S08PacketPlayerPosLook) {
                            if (mc.thePlayer.isUsingItem) {
                                if (mc.thePlayer.isBlocking) {
                                    PacketUtils.sendPacket(C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN))
                                } else {
                                    mc.playerController.onStoppedUsingItem(mc.thePlayer)
                                }
                            }
                        }
                    }
                    "Silent S08" -> if (event.packet is S08PacketPlayerPosLook) {
                        val s08 = event.packet as S08PacketPlayerPosLook
                        event.cancel()
                        PacketUtils.sendPacketNoEvent(
                            C06PacketPlayerPosLook(
                                s08.x,
                                s08.y,
                                s08.z,
                                s08.yaw,
                                s08.pitch,
                                false
                            )
                        )
                    }
                }
            }
        }
    }

    private val isBlockUnder: Boolean
        get() {
            if (mc.thePlayer.posY < 0) return false
            var offset = 0
            while (offset < mc.thePlayer.posY.toInt() + 2) {
                val bb = mc.thePlayer.entityBoundingBox.offset(0.0, -offset.toDouble(), 0.0)
                if (mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, bb).isNotEmpty()) {
                    return true
                }
                offset += 2
            }
            return false
        }

    override fun onWorldEvent(event: WorldEvent) {
        watchdogC0FC00Packets.clear()
        timer.reset()
    }

    override fun onJumpEvent(event: JumpEvent?) {
        for (booleanSetting in disablers.boolSettings) {
            if (booleanSetting.isEnabled) {
                if (booleanSetting.name.equals("WatchDog")) {
                    if (lastOnGroundTicks < 4 && curOnGroundTicks < 4) {
                        mc.thePlayer.isSprinting = true
                    } else {
                        lastOnGroundTicks = curOnGroundTicks
                    }
                }
            }
        }
    }

    override fun onDisable() {
        lastOnGroundTicks = 0
        curOnGroundTicks = 0
    }

    companion object {
        var spiking: Boolean = false
        val spikeTimer: TimerUtil = TimerUtil()
    }
}

